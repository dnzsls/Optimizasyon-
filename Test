from pulp import *
import pandas as pd

# ----------------------------------------------------
# 1. VERİ TANIMLAMA (Erlang C Çıktıları Temel Alınmıştır)
# ----------------------------------------------------

# Vardiya Tanımları
VARDİYALAR = ['Sabah', 'Öğle', 'Gece']
GUNLER = ['Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt', 'Paz']

# Çalışan Tipleri
CALISAN_GRUPLARI = ['A_Uzman', 'B_Uzman'] # B_Uzmanları, A'ya yardım edebilir

# Erlang C'den gelen Personel İhtiyacı (Talep Matrisi)
# DEMAND[kuyruk][vardiya][gün] = Gerekli Personel Sayısı
DEMAND = {
    'A': { # Kuyruk A Talebi
        'Sabah': {'Pzt': 5, 'Sal': 5, 'Çar': 5, 'Per': 5, 'Cum': 6, 'Cmt': 7, 'Paz': 6},
        'Öğle':  {'Pzt': 7, 'Sal': 7, 'Çar': 7, 'Per': 7, 'Cum': 8, 'Cmt': 9, 'Paz': 8},
        'Gece':  {'Pzt': 3, 'Sal': 3, 'Çar': 3, 'Per': 3, 'Cum': 4, 'Cmt': 4, 'Paz': 3}
    },
    'B': { # Kuyruk B Talebi (Sadece B-Uzmanları Karşılayabilir)
        'Sabah': {'Pzt': 4, 'Sal': 4, 'Çar': 4, 'Per': 4, 'Cum': 4, 'Cmt': 3, 'Paz': 3},
        'Öğle':  {'Pzt': 5, 'Sal': 5, 'Çar': 5, 'Per': 5, 'Cum': 5, 'Cmt': 3, 'Paz': 3},
        'Gece':  {'Pzt': 2, 'Sal': 2, 'Çar': 2, 'Per': 2, 'Cum': 2, 'Cmt': 1, 'Paz': 1}
    }
}

HAFTA_ICI = ['Pzt', 'Sal', 'Çar', 'Per', 'Cum']
HAFTA_SONU = ['Cmt', 'Paz']
MAX_CALISAN_KAPASITESI = 60 # Toplam mevcut çalışan sayısı (Sadece ek kısıt için)

# ----------------------------------------------------
# 2. OPTİMİZASYON MODELİNİ OLUŞTURMA
# ----------------------------------------------------

model = LpProblem("3_Vardiya_Coklu_Beceri_Planlama", LpMinimize)

# ----------------------------------------------------
# 3. KARAR DEĞİŞKENLERİ
# ----------------------------------------------------

# X[vardiya][gün]: O gün, o vardiyaya atanan A_Uzmanı sayısı (Tamsayı)
X_A = LpVariable.dicts("Atama_A", (VARDİYALAR, GUNLER), lowBound=0, cat=LpInteger)

# X[vardiya][gün]: O gün, o vardiyaya atanan B_Uzmanı sayısı (Tamsayı)
X_B = LpVariable.dicts("Atama_B", (VARDİYALAR, GUNLER), lowBound=0, cat=LpInteger)

# ----------------------------------------------------
# 4. AMAÇ FONKSİYONU
# ----------------------------------------------------

# Amaç: Atanan toplam çalışan sayısını (maliyeti) minimuma indirmek.
model += lpSum([X_A[v][g] + X_B[v][g] for v in VARDİYALAR for g in GUNLER]), "Toplam_Calisan_Maliyeti"

# ----------------------------------------------------
# 5. KISITLAR (CONSTRAINTS)
# ----------------------------------------------------

# Kısıt 1: B Kuyruğu Talep Kısıtı (Sadece B-Uzmanları karşılayabilir)
# Her gün, her vardiyada, B_Uzmanları B kuyruğu talebini karşılamak ZORUNDADIR.
for v in VARDİYALAR:
    for g in GUNLER:
        model += X_B[v][g] >= DEMAND['B'][v][g], f"Kisit_B_Talep_{v}_{g}"

# Kısıt 2: A Kuyruğu Talep Kısıtı (Esneklik Kuralı)
for v in VARDİYALAR:
    for g in GUNLER:
        # A kuyruğu talebi = A-Uzmanları + B-Uzmanlarından gelen destek
        
        if g in HAFTA_SONU:
            # Hafta Sonu Kuralı: B'den A'ya YARDIM YOK. B-Uzmanları KENDİ KUYRUĞUNDA.
            # Sadece A-Uzmanları A talebini karşılamak zorunda.
            model += X_A[v][g] >= DEMAND['A'][v][g], f"Kisit_A_Talep_HS_{v}_{g}"
        
        else:
            # Hafta İçi Kuralı: B-Uzmanları A'ya yardım edebilir.
            # A'ya atanan A-Uzmanları + B'ye atanan B-Uzmanları TOPLAMI, A'nın talebini karşılamalıdır.
            # (Bu, PuLP'ın B'nin fazlasını A'ya aktarması için esneklik yaratır.)
            model += X_A[v][g] + X_B[v][g] >= DEMAND['A'][v][g], f"Kisit_A_Talep_HI_{v}_{g}"

# Kısıt 3: Günlük Tek Vardiya Kısıtı (Bir çalışan günde sadece bir vardiyada çalışır)
# Bu model atama yapmadığı, sadece kaç kişi atanacağını bulduğu için bu kısıt gereksizdir. 
# Ancak, atanan toplam kişi sayısının kapasiteyi aşmadığından emin olmak için toplam kısıt eklenebilir.

# Kısıt 4: Çalışma Günü Kısıtı (Ekstra Gerçekçilik - Herkesin 5 Gün Çalışması)
# Bu model sadece günlük ihtiyacı bulur, bireysel çalışanı atamaz (Rostering yapmaz).
# Eğer her çalışanın haftada 5 gün çalışması gerektiğini modellemek isteseydik, 
# karar değişkenlerini bireysel çalışan (i) ve gün (g) bazında (X_i_g) tanımlamamız gerekirdi. 
# Bu basit modelde, sadece atanan toplam gün sayısını kısıtlıyoruz (bkz. Amaç Fonksiyonu).

# ----------------------------------------------------
# 6. MODELİ ÇÖZME VE SONUÇLARI GÖRÜNTÜLEME
# ----------------------------------------------------

model.solve()

# Çözüm durumunu kontrol et
print(f"Durum: {LpStatus[model.status]}\n")

# Sonuçları toplama
sonuclar = []
for v in VARDİYALAR:
    for g in GUNLER:
        A_atanan = value(X_A[v][g])
        B_atanan = value(X_B[v][g])
        
        A_talep = DEMAND['A'][v][g]
        B_talep = DEMAND['B'][v][g]
        
        # Hafta İçi Esneklik Analizi
        B_A_destek = 0
        A_karsilayan_toplam = A_atanan # Hafta Sonu için varsayılan
        
        if g in HAFTA_ICI:
            # B'ye atanan personelin (B_atanan), B talebini karşıladıktan sonra kalan kısmı A'ya destektir.
            B_A_destek = max(0, B_atanan - B_talep)
            A_karsilayan_toplam = A_atanan + B_A_destek
        elif g in HAFTA_SONU:
            # Hafta Sonu: B'den A'ya destek 0'dır, A'yı sadece A_atanan karşılar.
            A_karsilayan_toplam = A_atanan
            
        sonuclar.append({
            'Vardiya': v,
            'Gün': g,
            'A Talep': A_talep,
            'B Talep': B_talep,
            'Atanan A-Uzmanları': A_atanan,
            'Atanan B-Uzmanları': B_atanan,
            'A Karsilayan Toplam': A_karsilayan_toplam,
            'B\'den A\'ya Destek': B_A_destek if g in HAFTA_ICI else 0,
            'A Karsilandi': 'EVET' if A_karsilayan_toplam >= A_talep else 'HAYIR',
            'B Karsilandi': 'EVET' if B_atanan >= B_talep else 'HAYIR'
        })

df_sonuc = pd.DataFrame(sonuclar)

print("--- Vardiya Bazında Personel Dağılımı Sonuçları ---")
# Pivot tablo ile daha okunabilir hale getiriyoruz
df_pivot = df_sonuc.pivot_table(
    index=['Vardiya', 'Gün'], 
    values=['Atanan A-Uzmanları', 'Atanan B-Uzmanları', 'A Talep', 'B Talep', 'A Karsilayan Toplam'], 
    aggfunc='first'
)
print(df_pivot.to_markdown(floatfmt=".0f"))
print(f"\nMinimum Toplam Atanan Çalışan Gün Sayısı (Haftalık): {value(model.objective):.0f}")
