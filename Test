from pulp import *
import pandas as pd
import numpy as np

# ----------------------------------------------------
# 1. VERİ TANIMLAMA
# ----------------------------------------------------

# Çalışan Tanımları (Örnek çalışan listesi ve becerileri)
A_CALISANLARI = [f'A{i}' for i in range(1, 4)]  # 3 A-Uzmanı
B_CALISANLARI = [f'B{i}' for i in range(1, 3)]  # 2 B-Uzmanı (A'ya yardım edebilir)
TUM_CALISANLAR = A_CALISANLARI + B_CALISANLARI
BECERILER = {c: ('A',) for c in A_CALISANLARI}
BECERILER.update({c: ('A', 'B') for c in B_CALISANLARI}) # B uzmanları hem A hem B yapabilir

# Zaman ve Vardiya Tanımları
VARDİYALAR = ['Sabah', 'Öğle', 'Gece']
GUNLER_HAFTA = ['Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt', 'Paz']
HAFTA_SAYISI = 4
PLANLAMA_PERIYODU = [(h, g) for h in range(1, HAFTA_SAYISI + 1) for g in GUNLER_HAFTA]

# Hafta Sonu Tanımı
HAFTA_SONU = ['Cmt', 'Paz']

# DEMAND_STAFF (Vardiya/gün başına gerekli minimum personel sayısı)
DEMAND_STAFF = {
    'A': { # Kuyruk A Personel Talebi (Örnek Data)
        'Sabah': {'Pzt': 1, 'Sal': 1, 'Çar': 1, 'Per': 1, 'Cum': 2, 'Cmt': 2, 'Paz': 2},
        'Öğle':  {'Pzt': 2, 'Sal': 2, 'Çar': 2, 'Per': 2, 'Cum': 3, 'Cmt': 3, 'Paz': 3},
        'Gece':  {'Pzt': 1, 'Sal': 1, 'Çar': 1, 'Per': 1, 'Cum': 1, 'Cmt': 1, 'Paz': 1}
    },
    'B': { # Kuyruk B Personel Talebi (Örnek Data)
        'Sabah': {'Pzt': 1, 'Sal': 1, 'Çar': 1, 'Per': 1, 'Cum': 1, 'Cmt': 0, 'Paz': 0},
        'Öğle':  {'Pzt': 1, 'Sal': 1, 'Çar': 1, 'Per': 1, 'Cum': 1, 'Cmt': 1, 'Paz': 1},
        'Gece':  {'Pzt': 0, 'Sal': 0, 'Çar': 0, 'Per': 0, 'Cum': 0, 'Cmt': 0, 'Paz': 0}
    }
}

# ----------------------------------------------------
# 2. OPTİMİZASYON MODELİNİ OLUŞTURMA
# ----------------------------------------------------

model = LpProblem("Bireysel_Calisan_Rostering", LpMinimize)

# ----------------------------------------------------
# 3. KARAR DEĞİŞKENLERİ
# ----------------------------------------------------

# X[calisan][vardiya][hafta][gün]: Binary atama değişkeni
X = LpVariable.dicts("Atama", (TUM_CALISANLAR, VARDİYALAR, range(1, HAFTA_SAYISI + 1), GUNLER_HAFTA), cat=LpBinary)

# Y[calisan][hafta]: Çalışanın o haftasonu çalışıp çalışmadığını gösteren yardımcı değişken (Düzeltilmiş Tanım)
Y = LpVariable.dicts("HS_Calisma", (TUM_CALISANLAR, range(1, HAFTA_SAYISI + 1)), cat=LpBinary)


# ----------------------------------------------------
# 4. AMAÇ FONKSİYONU
# ----------------------------------------------------

# Amaç: Atanan toplam vardiya sayısını minimuma indirmek (Maliyeti düşürmek)
model += lpSum([X[c][v][h][g] for c in TUM_CALISANLAR for v in VARDİYALAR for h in range(1, HAFTA_SAYISI + 1) for g in GUNLER_HAFTA]), "Toplam_Vardiya_Sayisi"

# ----------------------------------------------------
# 5. TEMEL KISITLAR (Talep ve Kapasite)
# ----------------------------------------------------

# Kısıt 1: Bireysel Kapasite (Bir çalışan bir gün sadece 1 vardiya çalışır)
for c in TUM_CALISANLAR:
    for h in range(1, HAFTA_SAYISI + 1):
        for g in GUNLER_HAFTA:
            model += lpSum([X[c][v][h][g] for v in VARDİYALAR]) <= 1, f"Kisit_Tek_Vardiya_{c}_{h}_{g}"

# Kısıt 2: Talep Kısıtı (Tüm Talep Karşılanmalı)
for v in VARDİYALAR:
    for h in range(1, HAFTA_SAYISI + 1):
        for g in GUNLER_HAFTA:
            
            A_talep = DEMAND_STAFF['A'][v][g]
            B_talep = DEMAND_STAFF['B'][v][g]
            
            # B Kuyruğu Kısıtı (Sadece B-Uzmanları tarafından karşılanır)
            model += lpSum([X[c][v][h][g] for c in B_CALISANLARI]) >= B_talep, f"Kisit_Talep_B_{v}_{h}_{g}"
            
            # A Kuyruğu Kısıtı (A-Uzmanları + B-Uzmanları (Hafta içi esnek))
            if g in HAFTA_SONU:
                # Hafta Sonu: B'den A'ya yardım yok (Sadece A-Uzmanları)
                model += lpSum([X[c][v][h][g] for c in A_CALISANLARI]) >= A_talep, f"Kisit_Talep_A_HS_{v}_{h}_{g}"
            else:
                # Hafta İçi: B'den A'ya yardım var (A-Uzmanları + B-Uzmanları)
                model += lpSum([X[c][v][h][g] for c in TUM_CALISANLAR]) >= A_talep, f"Kisit_Talep_A_HI_{v}_{h}_{g}"


# ----------------------------------------------------
# 6. MESAI VE DİNLENME KISITLARI
# ----------------------------------------------------

# Kısıt 3: Maksimum Ardışık Vardiya Kısıtı (Maks. 2 Gün Üst Üste Çalışma)
for c in TUM_CALISANLAR:
    for h in range(1, HAFTA_SAYISI + 1):
        # 3'erli gün gruplarını kontrol et (g, g+1, g+2)
        for i in range(len(GUNLER_HAFTA) - 2): 
            g1, g2, g3 = GUNLER_HAFTA[i], GUNLER_HAFTA[i+1], GUNLER_HAFTA[i+2]
            
            # Üç ardışık günde çalışan toplam vardiya sayısı <= 2 olmalıdır.
            model += lpSum([X[c][v][h][g1] for v in VARDİYALAR]) + \
                     lpSum([X[c][v][h][g2] for v in VARDİYALAR]) + \
                     lpSum([X[c][v][h][g3] for v in VARDİYALAR]) <= 2, \
                     f"Kisit_Max_2_Gun_Calisma_{c}_{h}_{g1}"

# Kısıt 4: Aylık Haftasonu Kısıtı (Bir çalışan ayda en az bir Haftasonu tamamen izinli olmalı)
for c in TUM_CALISANLAR:
    for h in range(1, HAFTA_SAYISI + 1):
        # O haftasonu atanan toplam vardiya sayısı (Cmt ve Paz toplamı)
        haftasonu_vardiya_sayisi = lpSum([X[c][v][h][g] for v in VARDİYALAR for g in HAFTA_SONU])

        # Eğer haftasonu vardiya sayısı >= 1 ise (çalışma varsa), Y[c,h]=1 olmalıdır.
        model += haftasonu_vardiya_sayisi <= len(HAFTA_SONU) * Y[c, h], f"Kisit_HS_Calisma_Yukari_{c}_{h}"
        
    # Asıl Kısıt: Ayda en fazla (HAFTA_SAYISI - 1) haftasonu çalışılabilir.
    model += lpSum([Y[c, h] for h in range(1, HAFTA_SAYISI + 1)]) <= HAFTA_SAYISI - 1, f"Kisit_Min_1_HS_Izin_{c}"


# Kısıt 5: Esnek 6. Gün Kısıtı (Haftada min 5, maks 6 gün çalışma)
for c in TUM_CALISANLAR:
    for h in range(1, HAFTA_SAYISI + 1):
        haftalik_vardiya_sayisi = lpSum([X[c][v][h][g] for v in VARDİYALAR for g in GUNLER_HAFTA])
        
        # Maksimum 6 gün (İhtiyaç olursa 6. gün çalışılabilir)
        model += haftalik_vardiya_sayisi <= 6, f"Kisit_Maks_6_Gun_{c}_{h}"
        
        # Minimum 5 gün (Standart çalışma)
        model += haftalik_vardiya_sayisi >= 5, f"Kisit_Min_5_Gun_{c}_{h}"


# ----------------------------------------------------
# 7. MODELİ ÇÖZME VE SONUÇLARI GÖRÜNTÜLEME
# ----------------------------------------------------

print("Model Çözülüyor...")
# Modelin büyüklüğü nedeniyle, küçük bir örnekte bile çözüm zaman alabilir.
model.solve()

# Çözüm durumunu kontrol et
print(f"\nÇözüm Durumu: {LpStatus[model.status]}")

# Sonuçları görüntüleme
if model.status == LpStatus.Optimal:
    print(f"Minimum Toplam Atanan Vardiya Sayısı (4 Haftalık): {value(model.objective):.0f}")
    
    sonuclar = []
    for c in TUM_CALISANLAR:
        haftalik_calisma = {}
        haftasonu_izin_sayisi = 0
        
        for h in range(1, HAFTA_SAYISI + 1):
            haftalik_calisma[h] = 0
            
            for g in GUNLER_HAFTA:
                for v in VARDİYALAR:
                    # value() çağrısını try-except ile sarmalayarak olası hataları engelleme
                    try:
                        if value(X[c][v][h][g]) == 1:
                            sonuclar.append({
                                'Çalışan': c,
                                'Hafta': h,
                                'Gün': g,
                                'Vardiya': v,
                                'Becerisi': BECERILER[c]
                            })
                            haftalik_calisma[h] += 1
                    except Exception:
                        # Eğer çözümde bazı değişkenlere değer atanmadıysa, bu kısmı atla.
                        pass
            
            # Haftasonu izin kontrolü (Kısıt 4 kontrolü)
            try:
                if value(Y[c, h]) == 0:
                    haftasonu_izin_sayisi += 1
            except Exception:
                pass

        print(f"\nÇalışan {c} Özeti:")
        print(f"  Haftalık Çalışma Günleri: {haftalik_calisma}")
        print(f"  Ayda Alınan Haftasonu İzni Sayısı: {haftasonu_izin_sayisi} (Min 1 Olmalı)")


    df_atama = pd.DataFrame(sonuclar)
    
    print("\n--- Bireysel Atama Sonuçları (Tüm Atananlar) ---")
    df_pivot = df_atama.pivot_table(
        index=['Çalışan', 'Hafta'],
        columns='Gün',
        values='Vardiya',
        aggfunc=lambda x: ','.join(x.astype(str)) if len(x) > 0 else '',
        fill_value=''
    )
    # Pivot tabloyu haftanın gün sırasına göre sırala
    df_pivot = df_pivot[GUNLER_HAFTA]
    print(df_pivot.to_markdown())

else:
    print("Optimal bir çözüm bulunamadı.")
