from pulp import *
import pandas as pd

# ----------------------------------------------------
# 1. VERİ TANIMLAMA (Erlang C Çıktıları Temel Alınmıştır)
# ----------------------------------------------------

# Vardiya Tanımları
VARDİYALAR = ['Sabah', 'Öğle', 'Gece']
GUNLER = ['Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt', 'Paz']

# Çalışan Tipleri ve Kapasiteleri (Yeni Kısıt Verisi)
CALISAN_GRUPLARI = ['A_Uzman', 'B_Uzman']
KAPASITE_A = 35  # Toplam A-Uzman sayısı
KAPASITE_B = 25  # Toplam B-Uzman sayısı
CALISMA_GUNU_STANDARDI = 5 # Haftalık ortalama çalışma günü

MAX_A_SHIFTS_PER_WEEK = KAPASITE_A * CALISMA_GUNU_STANDARDI # 35 * 5 = 175
MAX_B_SHIFTS_PER_WEEK = KAPASITE_B * CALISMA_GUNU_STANDARDI # 25 * 5 = 125


# Erlang C'den gelen Personel İhtiyacı (Talep Matrisi)
DEMAND = {
    'A': { # Kuyruk A Talebi
        'Sabah': {'Pzt': 5, 'Sal': 5, 'Çar': 5, 'Per': 5, 'Cum': 6, 'Cmt': 7, 'Paz': 6},
        'Öğle':  {'Pzt': 7, 'Sal': 7, 'Çar': 7, 'Per': 7, 'Cum': 8, 'Cmt': 9, 'Paz': 8},
        'Gece':  {'Pzt': 3, 'Sal': 3, 'Çar': 3, 'Per': 3, 'Cum': 4, 'Cmt': 4, 'Paz': 3}
    },
    'B': { # Kuyruk B Talebi
        'Sabah': {'Pzt': 4, 'Sal': 4, 'Çar': 4, 'Per': 4, 'Cum': 4, 'Cmt': 3, 'Paz': 3},
        'Öğle':  {'Pzt': 5, 'Sal': 5, 'Çar': 5, 'Per': 5, 'Cum': 5, 'Cmt': 3, 'Paz': 3},
        'Gece':  {'Pzt': 2, 'Sal': 2, 'Çar': 2, 'Per': 2, 'Cum': 2, 'Cmt': 1, 'Paz': 1}
    }
}

HAFTA_ICI = ['Pzt', 'Sal', 'Çar', 'Per', 'Cum']
HAFTA_SONU = ['Cmt', 'Paz']

# ----------------------------------------------------
# 2. OPTİMİZASYON MODELİNİ OLUŞTURMA
# ----------------------------------------------------

model = LpProblem("3_Vardiya_Coklu_Beceri_Kapasiteli_Planlama", LpMinimize)

# ----------------------------------------------------
# 3. KARAR DEĞİŞKENLERİ
# ----------------------------------------------------

# X_A[vardiya][gün]: O gün, o vardiyaya atanan A_Uzmanı sayısı (Tamsayı)
X_A = LpVariable.dicts("Atama_A", (VARDİYALAR, GUNLER), lowBound=0, cat=LpInteger)

# X_B[vardiya][gün]: O gün, o vardiyaya atanan B_Uzmanı sayısı (Tamsayı)
X_B = LpVariable.dicts("Atama_B", (VARDİYALAR, GUNLER), lowBound=0, cat=LpInteger)

# ----------------------------------------------------
# 4. AMAÇ FONKSİYONU
# ----------------------------------------------------

# Amaç: Atanan toplam çalışan sayısını (maliyeti) minimuma indirmek.
model += lpSum([X_A[v][g] + X_B[v][g] for v in VARDİYALAR for g in GUNLER]), "Toplam_Calisan_Maliyeti"

# ----------------------------------------------------
# 5. KISITLAR (CONSTRAINTS)
# ----------------------------------------------------

# Kısıt 1: B Kuyruğu Talep Kısıtı (Sadece B-Uzmanları karşılayabilir)
for v in VARDİYALAR:
    for g in GUNLER:
        model += X_B[v][g] >= DEMAND['B'][v][g], f"Kisit_B_Talep_{v}_{g}"

# Kısıt 2: A Kuyruğu Talep Kısıtı (Esneklik Kuralı)
for v in VARDİYALAR:
    for g in GUNLER:
        if g in HAFTA_SONU:
            # Hafta Sonu Kuralı: B'den A'ya YARDIM YOK (Sabit Kural)
            model += X_A[v][g] >= DEMAND['A'][v][g], f"Kisit_A_Talep_HS_{v}_{g}"
        
        else:
            # Hafta İçi Kuralı: B-Uzmanları A'ya yardım edebilir (Esnek Kural)
            model += X_A[v][g] + X_B[v][g] >= DEMAND['A'][v][g], f"Kisit_A_Talep_HI_{v}_{g}"

# Kısıt 3: Negatif Olmama Kısıtı (Karar değişkenlerinin >= 0 olması)
# (Bu, LpVariable tanımında 'lowBound=0' ile zaten sağlanmıştır.)

# Kısıt 4 (YENİ): A-Uzmanları Haftalık Kapasite Kısıtı
# A-Uzmanlarına atanan toplam vardiya sayısı, maksimum kapasitelerinin (175 shift) üzerine çıkamaz.
model += lpSum([X_A[v][g] for v in VARDİYALAR for g in GUNLER]) <= MAX_A_SHIFTS_PER_WEEK, "Kisit_A_Kapasite"

# Kısıt 5 (YENİ): B-Uzmanları Haftalık Kapasite Kısıtı
# B-Uzmanlarına atanan toplam vardiya sayısı, maksimum kapasitelerinin (125 shift) üzerine çıkamaz.
model += lpSum([X_B[v][g] for v in VARDİYALAR for g in GUNLER]) <= MAX_B_SHIFTS_PER_WEEK, "Kisit_B_Kapasite"

# ----------------------------------------------------
# 6. MODELİ ÇÖZME VE SONUÇLARI GÖRÜNTÜLEME
# ----------------------------------------------------

model.solve()

# Çözüm durumunu kontrol et
print(f"Durum: {LpStatus[model.status]}\n")

# Sonuçları toplama
sonuclar = []
toplam_a_atanan = 0
toplam_b_atanan = 0

for v in VARDİYALAR:
    for g in GUNLER:
        A_atanan = value(X_A[v][g])
        B_atanan = value(X_B[v][g])
        
        toplam_a_atanan += A_atanan
        toplam_b_atanan += B_atanan
        
        A_talep = DEMAND['A'][v][g]
        B_talep = DEMAND['B'][v][g]
        
        B_A_destek = 0
        A_karsilayan_toplam = A_atanan
        
        if g in HAFTA_ICI:
            # B'ye atanan personelin B talebini karşıladıktan sonraki fazlalığı destek olarak sayılır.
            B_A_destek = max(0, B_atanan - B_talep)
            A_karsilayan_toplam = A_atanan + B_A_destek
        
        sonuclar.append({
            'Vardiya': v,
            'Gün': g,
            'A Talep': A_talep,
            'B Talep': B_talep,
            'Atanan A-Uzmanları': A_atanan,
            'Atanan B-Uzmanları': B_atanan,
            'A Karsilayan Toplam': A_karsilayan_toplam,
            'B\'den A\'ya Destek (HI)': B_A_destek if g in HAFTA_ICI else 0,
        })

df_sonuc = pd.DataFrame(sonuclar)

print("--- Vardiya Bazında Personel Dağılımı Sonuçları ---")
# Pivot tablo ile daha okunabilir hale getiriyoruz
df_pivot = df_sonuc.pivot_table(
    index=['Vardiya', 'Gün'], 
    values=['Atanan A-Uzmanları', 'Atanan B-Uzmanları', 'A Talep', 'B Talep', 'A Karsilayan Toplam'], 
    aggfunc='first'
)
print(df_pivot.to_markdown(floatfmt=".0f"))

print("\n--- Haftalık Kapasite Özeti ---")
print(f"Minimum Toplam Atanan Çalışan Gün Sayısı (Haftalık): {value(model.objective):.0f}")
print(f"Toplam Atanan A-Uzman Vardiyası: {toplam_a_atanan:.0f} (Maks. Kapasite: {MAX_A_SHIFTS_PER_WEEK})")
print(f"Toplam Atanan B-Uzman Vardiyası: {toplam_b_atanan:.0f} (Maks. Kapasite: {MAX_B_SHIFTS_PER_WEEK})")
